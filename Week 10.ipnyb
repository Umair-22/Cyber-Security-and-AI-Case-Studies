{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "8a1af699",
      "metadata": {
        "id": "8a1af699"
      },
      "source": [
        "# KDD Data Analysis and Attack Classification using Machine Learning & Neural Networks\n",
        "This notebook covers data preprocessing, feature engineering, and training multiple ML models to classify attacks using the KDD dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "6a54bdd7",
      "metadata": {
        "id": "6a54bdd7"
      },
      "outputs": [],
      "source": [
        "\n",
        "import pandas as pd  # Importing pandas for data handling\n",
        "import numpy as np  # Importing numpy for numerical operations\n",
        "import seaborn as sns  # Importing seaborn for visualization\n",
        "import matplotlib.pyplot as plt  # Importing matplotlib for plotting graphs\n",
        "from sklearn.model_selection import train_test_split  # Splitting dataset into train and test\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder  # Encoding categorical variables and scaling data\n",
        "from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier  # Importing classification models\n",
        "from sklearn.svm import SVC  # Importing Support Vector Classifier\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix  # Evaluation metrics\n",
        "import tensorflow as tf  # TensorFlow for deep learning\n",
        "from tensorflow import keras  # Keras API for building models\n",
        "from tensorflow.keras.models import Sequential  # Sequential model type\n",
        "from tensorflow.keras.layers import Dense, Dropout  # Neural network layers\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b18cfbf0",
      "metadata": {
        "id": "b18cfbf0"
      },
      "source": [
        "## Load the KDD dataset from URL"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "0c105387",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "0c105387",
        "outputId": "1da64376-e56d-48af-8d65-0204de6c5120"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   duration protocol_type service flag  src_bytes  dst_bytes  land  \\\n",
              "0         0           tcp    http   SF        181       5450     0   \n",
              "1         0           tcp    http   SF        239        486     0   \n",
              "2         0           tcp    http   SF        235       1337     0   \n",
              "3         0           tcp    http   SF        219       1337     0   \n",
              "4         0           tcp    http   SF        217       2032     0   \n",
              "\n",
              "   wrong_fragment  urgent  hot  ...  dst_host_srv_count  \\\n",
              "0               0       0    0  ...                   9   \n",
              "1               0       0    0  ...                  19   \n",
              "2               0       0    0  ...                  29   \n",
              "3               0       0    0  ...                  39   \n",
              "4               0       0    0  ...                  49   \n",
              "\n",
              "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
              "0                     1.0                     0.0   \n",
              "1                     1.0                     0.0   \n",
              "2                     1.0                     0.0   \n",
              "3                     1.0                     0.0   \n",
              "4                     1.0                     0.0   \n",
              "\n",
              "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
              "0                         0.11                          0.0   \n",
              "1                         0.05                          0.0   \n",
              "2                         0.03                          0.0   \n",
              "3                         0.03                          0.0   \n",
              "4                         0.02                          0.0   \n",
              "\n",
              "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "0                   0.0                       0.0                   0.0   \n",
              "1                   0.0                       0.0                   0.0   \n",
              "2                   0.0                       0.0                   0.0   \n",
              "3                   0.0                       0.0                   0.0   \n",
              "4                   0.0                       0.0                   0.0   \n",
              "\n",
              "   dst_host_srv_rerror_rate    label  \n",
              "0                       0.0  normal.  \n",
              "1                       0.0  normal.  \n",
              "2                       0.0  normal.  \n",
              "3                       0.0  normal.  \n",
              "4                       0.0  normal.  \n",
              "\n",
              "[5 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ab93eb0-15aa-476b-a9ca-c1f6022424af\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>...</th>\n",
              "      <th>dst_host_srv_count</th>\n",
              "      <th>dst_host_same_srv_rate</th>\n",
              "      <th>dst_host_diff_srv_rate</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>181</td>\n",
              "      <td>5450</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>9</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.11</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>normal.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>239</td>\n",
              "      <td>486</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>19</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.05</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>normal.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>235</td>\n",
              "      <td>1337</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>29</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>normal.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>219</td>\n",
              "      <td>1337</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>39</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.03</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>normal.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>tcp</td>\n",
              "      <td>http</td>\n",
              "      <td>SF</td>\n",
              "      <td>217</td>\n",
              "      <td>2032</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>49</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>normal.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ab93eb0-15aa-476b-a9ca-c1f6022424af')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5ab93eb0-15aa-476b-a9ca-c1f6022424af button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5ab93eb0-15aa-476b-a9ca-c1f6022424af');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b033b451-ecc1-4677-ad3d-e046252be985\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b033b451-ecc1-4677-ad3d-e046252be985')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b033b451-ecc1-4677-ad3d-e046252be985 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "\n",
        "# Load KDD dataset from URL\n",
        "url = \"http://kdd.ics.uci.edu/databases/kddcup99/kddcup.data_10_percent.gz\"\n",
        "col_names = [\"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\", \"urgent\", \"hot\",\n",
        "             \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\", \"num_root\", \"num_file_creations\", \"num_shells\",\n",
        "             \"num_access_files\", \"num_outbound_cmds\", \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\",\n",
        "             \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\", \"dst_host_count\", \"dst_host_srv_count\",\n",
        "             \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\", \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n",
        "             \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"label\"]\n",
        "\n",
        "df = pd.read_csv(url, names=col_names, compression='gzip')\n",
        "\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "1cCrnvQLhv4V",
      "metadata": {
        "id": "1cCrnvQLhv4V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7b5a4a55-c51e-4687-a684-73a7155c9096"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5000, 42)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "# prompt: sample 5000 rows to make training faster\n",
        "\n",
        "# Sample 5000 rows from the DataFrame\n",
        "df = df.sample(n=5000, random_state=42)  # Use random_state for reproducibility\n",
        "\n",
        "# Now df_sampled contains your sampled data\n",
        "df.shape\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2fb1bbb7",
      "metadata": {
        "id": "2fb1bbb7"
      },
      "source": [
        "## Data Preprocessing & Feature Engineering"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "08f286b1",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "08f286b1",
        "outputId": "5aa91bff-b732-4e83-e74b-ecc248d9772e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        duration  protocol_type  service  flag  src_bytes  dst_bytes  land  \\\n",
              "317921         0              0       13     6       1032          0     0   \n",
              "171422         0              0       13     6       1032          0     0   \n",
              "312181         0              0       13     6       1032          0     0   \n",
              "87346          0              1       18     6        345       5419     0   \n",
              "57449          0              1       31     3          0          0     0   \n",
              "\n",
              "        wrong_fragment  urgent  hot  ...  dst_host_same_src_port_rate  \\\n",
              "317921               0       0    0  ...                         1.00   \n",
              "171422               0       0    0  ...                         1.00   \n",
              "312181               0       0    0  ...                         1.00   \n",
              "87346                0       0    0  ...                         0.01   \n",
              "57449                0       0    0  ...                         0.00   \n",
              "\n",
              "        dst_host_srv_diff_host_rate  dst_host_serror_rate  \\\n",
              "317921                         0.00                   0.0   \n",
              "171422                         0.00                   0.0   \n",
              "312181                         0.00                   0.0   \n",
              "87346                          0.02                   0.0   \n",
              "57449                          0.00                   1.0   \n",
              "\n",
              "        dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
              "317921                       0.0                   0.0   \n",
              "171422                       0.0                   0.0   \n",
              "312181                       0.0                   0.0   \n",
              "87346                        0.0                   0.0   \n",
              "57449                        1.0                   0.0   \n",
              "\n",
              "        dst_host_srv_rerror_rate  label   byte_ratio  total_count  error_rate  \n",
              "317921                       0.0      0  1032.000000         1022         0.0  \n",
              "171422                       0.0      0  1032.000000         1022         0.0  \n",
              "312181                       0.0      0  1032.000000         1022         0.0  \n",
              "87346                        0.0      1     0.063653           12         0.0  \n",
              "57449                        0.0      0     0.000000          262         0.5  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a84eadca-53a9-4016-af30-f299d52fa4df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>protocol_type</th>\n",
              "      <th>service</th>\n",
              "      <th>flag</th>\n",
              "      <th>src_bytes</th>\n",
              "      <th>dst_bytes</th>\n",
              "      <th>land</th>\n",
              "      <th>wrong_fragment</th>\n",
              "      <th>urgent</th>\n",
              "      <th>hot</th>\n",
              "      <th>...</th>\n",
              "      <th>dst_host_same_src_port_rate</th>\n",
              "      <th>dst_host_srv_diff_host_rate</th>\n",
              "      <th>dst_host_serror_rate</th>\n",
              "      <th>dst_host_srv_serror_rate</th>\n",
              "      <th>dst_host_rerror_rate</th>\n",
              "      <th>dst_host_srv_rerror_rate</th>\n",
              "      <th>label</th>\n",
              "      <th>byte_ratio</th>\n",
              "      <th>total_count</th>\n",
              "      <th>error_rate</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>317921</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>1032</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1032.000000</td>\n",
              "      <td>1022</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171422</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>1032</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1032.000000</td>\n",
              "      <td>1022</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312181</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>1032</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1032.000000</td>\n",
              "      <td>1022</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>87346</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>6</td>\n",
              "      <td>345</td>\n",
              "      <td>5419</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.01</td>\n",
              "      <td>0.02</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.063653</td>\n",
              "      <td>12</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57449</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>31</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>262</td>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a84eadca-53a9-4016-af30-f299d52fa4df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a84eadca-53a9-4016-af30-f299d52fa4df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a84eadca-53a9-4016-af30-f299d52fa4df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2ea42a0a-54e8-4733-a056-099436b386c0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2ea42a0a-54e8-4733-a056-099436b386c0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2ea42a0a-54e8-4733-a056-099436b386c0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "\n",
        "# Encoding categorical variables into numeric form\n",
        "encoder = LabelEncoder()\n",
        "categorical_columns = ['protocol_type', 'service', 'flag']\n",
        "for col in categorical_columns:\n",
        "    df[col] = encoder.fit_transform(df[col])\n",
        "\n",
        "# Convert labels into binary classification (attack or normal)\n",
        "df['label'] = df['label'].apply(lambda x: 'normal' if x == 'normal.' else 'attack')\n",
        "df['label'] = encoder.fit_transform(df['label'])\n",
        "\n",
        "# Feature Engineering: Creating new features\n",
        "df['byte_ratio'] = df['src_bytes'] / (df['dst_bytes'] + 1)\n",
        "df['total_count'] = df['count'] + df['srv_count']\n",
        "df['error_rate'] = (df['serror_rate'] + df['rerror_rate']) / 2\n",
        "\n",
        "df.head()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "36e13383",
      "metadata": {
        "id": "36e13383"
      },
      "source": [
        "## Splitting Data into Training and Testing Sets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "78962866",
      "metadata": {
        "id": "78962866"
      },
      "outputs": [],
      "source": [
        "\n",
        "X = df.drop('label', axis=1)\n",
        "y = df['label']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Feature scaling\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "46b014d4",
      "metadata": {
        "id": "46b014d4"
      },
      "source": [
        "## Training Machine Learning Models\n",
        "Random Forest Classifiers:\n",
        "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\n",
        "\n",
        "Gradient Boosting Classifier:\n",
        "https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\n",
        "\n",
        "Support Vector Classifier:\n",
        "https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVC.html#"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "b3fd095e",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b3fd095e",
        "outputId": "45622e8e-b269-4921-db2a-90b9dd076f8e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Accuracy: 0.997\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.98      1.00      0.99       192\n",
            "\n",
            "    accuracy                           1.00      1000\n",
            "   macro avg       0.99      1.00      1.00      1000\n",
            "weighted avg       1.00      1.00      1.00      1000\n",
            "\n",
            "Gradient Boosting Accuracy: 0.997\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.98      1.00      0.99       192\n",
            "\n",
            "    accuracy                           1.00      1000\n",
            "   macro avg       0.99      1.00      1.00      1000\n",
            "weighted avg       1.00      1.00      1.00      1000\n",
            "\n",
            "SVM Accuracy: 0.994\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.98      0.98      0.98       192\n",
            "\n",
            "    accuracy                           0.99      1000\n",
            "   macro avg       0.99      0.99      0.99      1000\n",
            "weighted avg       0.99      0.99      0.99      1000\n",
            "\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# RandomForest Classifier\n",
        "rf = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "rf.fit(X_train, y_train)\n",
        "y_pred_rf = rf.predict(X_test)\n",
        "print(\"Random Forest Accuracy:\", accuracy_score(y_test, y_pred_rf))\n",
        "print(classification_report(y_test, y_pred_rf))\n",
        "\n",
        "# Gradient Boosting Classifier\n",
        "gb = GradientBoostingClassifier(n_estimators=100, random_state=42)\n",
        "gb.fit(X_train, y_train)\n",
        "y_pred_gb = gb.predict(X_test)\n",
        "print(\"Gradient Boosting Accuracy:\", accuracy_score(y_test, y_pred_gb))\n",
        "print(classification_report(y_test, y_pred_gb))\n",
        "\n",
        "# Support Vector Machine (SVM)\n",
        "svm = SVC(kernel='linear', probability=True)\n",
        "svm.fit(X_train, y_train)\n",
        "y_pred_svm = svm.predict(X_test)\n",
        "print(\"SVM Accuracy:\", accuracy_score(y_test, y_pred_svm))\n",
        "print(classification_report(y_test, y_pred_svm))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96c8d544",
      "metadata": {
        "id": "96c8d544"
      },
      "source": [
        "## Building a Neural Network Classifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "866bee77",
      "metadata": {
        "id": "866bee77",
        "outputId": "879b642d-a636-46da-e41e-2bdb3af03738",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 7ms/step - accuracy: 0.8511 - loss: 0.4013 - val_accuracy: 0.9910 - val_loss: 0.0616\n",
            "Epoch 2/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9766 - loss: 0.1112 - val_accuracy: 0.9930 - val_loss: 0.0443\n",
            "Epoch 3/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9879 - loss: 0.0706 - val_accuracy: 0.9930 - val_loss: 0.0481\n",
            "Epoch 4/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9897 - loss: 0.0404 - val_accuracy: 0.9950 - val_loss: 0.0483\n",
            "Epoch 5/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9904 - loss: 0.0461 - val_accuracy: 0.9940 - val_loss: 0.0594\n",
            "Epoch 6/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9932 - loss: 0.0359 - val_accuracy: 0.9940 - val_loss: 0.0602\n",
            "Epoch 7/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9948 - loss: 0.0260 - val_accuracy: 0.9950 - val_loss: 0.0623\n",
            "Epoch 8/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9982 - loss: 0.0119 - val_accuracy: 0.9950 - val_loss: 0.0700\n",
            "Epoch 9/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9956 - loss: 0.0281 - val_accuracy: 0.9940 - val_loss: 0.0704\n",
            "Epoch 10/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9949 - loss: 0.0225 - val_accuracy: 0.9960 - val_loss: 0.0720\n",
            "Epoch 11/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9937 - loss: 0.0480 - val_accuracy: 0.9960 - val_loss: 0.0698\n",
            "Epoch 12/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9966 - loss: 0.0238 - val_accuracy: 0.9970 - val_loss: 0.0702\n",
            "Epoch 13/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9962 - loss: 0.0174 - val_accuracy: 0.9970 - val_loss: 0.0735\n",
            "Epoch 14/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9980 - loss: 0.0114 - val_accuracy: 0.9970 - val_loss: 0.0759\n",
            "Epoch 15/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - accuracy: 0.9980 - loss: 0.0138 - val_accuracy: 0.9970 - val_loss: 0.0771\n",
            "Epoch 16/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9975 - loss: 0.0158 - val_accuracy: 0.9970 - val_loss: 0.0796\n",
            "Epoch 17/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9971 - loss: 0.0117 - val_accuracy: 0.9970 - val_loss: 0.0772\n",
            "Epoch 18/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9981 - loss: 0.0117 - val_accuracy: 0.9950 - val_loss: 0.0780\n",
            "Epoch 19/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9981 - loss: 0.0115 - val_accuracy: 0.9980 - val_loss: 0.0780\n",
            "Epoch 20/20\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9960 - loss: 0.0165 - val_accuracy: 0.9980 - val_loss: 0.0811\n"
          ]
        }
      ],
      "source": [
        "\n",
        "model = Sequential([\n",
        "    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),\n",
        "    Dropout(0.5),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "history = model.fit(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "462025ec",
      "metadata": {
        "id": "462025ec"
      },
      "source": [
        "## Evaluating Neural Network Performance"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "id": "70373514",
      "metadata": {
        "id": "70373514",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "outputId": "3ad675b2-67f5-4564-8d14-067d6e7e08e9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step\n",
            "Neural Network Accuracy: 0.998\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.99      0.99      0.99       192\n",
            "\n",
            "    accuracy                           1.00      1000\n",
            "   macro avg       1.00      1.00      1.00      1000\n",
            "weighted avg       1.00      1.00      1.00      1000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "\n",
        "y_pred_nn = (model.predict(X_test) > 0.5).astype(\"int32\")\n",
        "print(\"Neural Network Accuracy:\", accuracy_score(y_test, y_pred_nn))\n",
        "print(classification_report(y_test, y_pred_nn))\n",
        "\n",
        "# Plot training history\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('Neural Network Training History')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "L1jcqum_b7fr",
      "metadata": {
        "id": "L1jcqum_b7fr"
      },
      "source": [
        "Based on the above code, write your own code to develop other ML or Neural network algorithms from list below.\n",
        "\n",
        "Machine Learning Algorithms\n",
        "**bold text**\n",
        "Decision Tree Classifier:  https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html\n",
        "\n",
        "K-Nearest Neighbors (KNN):  https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\n",
        "\n",
        "Logistic Regression: https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\n",
        "\n",
        "Naive Bayes Classifier: https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html\n",
        "\n",
        "\n",
        "**Deep Learning Models**\n",
        "Long Short-Term Memory (LSTM): https://keras.io/api/layers/recurrent_layers/lstm/\n",
        "\n",
        "Convolutional Neural Networks (CNN): https://keras.io/api/layers/convolution_layers/convolution1d/\n",
        "\n",
        "Transformers (Hugging Face Transformers)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "eEiL-iingx4E",
      "metadata": {
        "id": "eEiL-iingx4E"
      },
      "source": [
        "**Important: Lab-Logbbok requirement**\n",
        "\n",
        "Provide a bar graph comparing accuracy, precicion, recall, and f-score for various AI models\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Decision Tree Classifier (ML)"
      ],
      "metadata": {
        "id": "7eSy-9sDuNNN"
      },
      "id": "7eSy-9sDuNNN"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "# Initialize and train Decision Tree model\n",
        "dt = DecisionTreeClassifier(random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "print(\"Decision Tree Accuracy:\", accuracy_score(y_test, y_pred_dt))\n",
        "print(classification_report(y_test, y_pred_dt))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UiSniibCuQ5g",
        "outputId": "e4dcdc46-3fb2-4b97-f726-592149354628"
      },
      "id": "UiSniibCuQ5g",
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Decision Tree Accuracy: 0.996\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.98      1.00      0.99       192\n",
            "\n",
            "    accuracy                           1.00      1000\n",
            "   macro avg       0.99      1.00      0.99      1000\n",
            "weighted avg       1.00      1.00      1.00      1000\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Long Short-Term Memory (LSTM) Neural Network (DL)"
      ],
      "metadata": {
        "id": "nzLaojYGuUeZ"
      },
      "id": "nzLaojYGuUeZ"
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import LSTM\n",
        "\n",
        "# Reshape data for LSTM: (samples, timesteps, features)\n",
        "X_train_lstm = X_train.reshape((X_train.shape[0], 1, X_train.shape[1]))\n",
        "X_test_lstm = X_test.reshape((X_test.shape[0], 1, X_test.shape[1]))\n",
        "\n",
        "# Build LSTM model\n",
        "model_lstm = Sequential([\n",
        "    LSTM(64, return_sequences=False, input_shape=(1, X_train.shape[1])),\n",
        "    Dropout(0.5),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "# Compile and train\n",
        "model_lstm.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "history_lstm = model_lstm.fit(X_train_lstm, y_train, epochs=10, batch_size=32, validation_data=(X_test_lstm, y_test))\n",
        "\n",
        "# Predict and evaluate\n",
        "y_pred_lstm = (model_lstm.predict(X_test_lstm) > 0.5).astype(\"int32\")\n",
        "print(\"LSTM Accuracy:\", accuracy_score(y_test, y_pred_lstm))\n",
        "print(classification_report(y_test, y_pred_lstm))\n",
        "\n",
        "# Plot LSTM training history\n",
        "plt.plot(history_lstm.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history_lstm.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.title('LSTM Training History')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "X3K9yiujuYbu",
        "outputId": "b579cf9c-79eb-4108-b778-77fb53b6ae67"
      },
      "id": "X3K9yiujuYbu",
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 12ms/step - accuracy: 0.8186 - loss: 0.4911 - val_accuracy: 0.9900 - val_loss: 0.0367\n",
            "Epoch 2/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - accuracy: 0.9894 - loss: 0.0523 - val_accuracy: 0.9950 - val_loss: 0.0149\n",
            "Epoch 3/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9938 - loss: 0.0298 - val_accuracy: 0.9950 - val_loss: 0.0143\n",
            "Epoch 4/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9980 - loss: 0.0182 - val_accuracy: 0.9960 - val_loss: 0.0146\n",
            "Epoch 5/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9990 - loss: 0.0101 - val_accuracy: 0.9960 - val_loss: 0.0157\n",
            "Epoch 6/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9986 - loss: 0.0102 - val_accuracy: 0.9960 - val_loss: 0.0165\n",
            "Epoch 7/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9984 - loss: 0.0118 - val_accuracy: 0.9960 - val_loss: 0.0174\n",
            "Epoch 8/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.9990 - loss: 0.0099 - val_accuracy: 0.9970 - val_loss: 0.0179\n",
            "Epoch 9/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 5ms/step - accuracy: 0.9987 - loss: 0.0076 - val_accuracy: 0.9970 - val_loss: 0.0191\n",
            "Epoch 10/10\n",
            "\u001b[1m125/125\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 6ms/step - accuracy: 0.9990 - loss: 0.0069 - val_accuracy: 0.9970 - val_loss: 0.0190\n",
            "\u001b[1m32/32\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 11ms/step\n",
            "LSTM Accuracy: 0.997\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       808\n",
            "           1       0.99      0.99      0.99       192\n",
            "\n",
            "    accuracy                           1.00      1000\n",
            "   macro avg       0.99      1.00      1.00      1000\n",
            "weighted avg       1.00      1.00      1.00      1000\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Provide a bar graph comparing accuracy, precicion, recall, and f-score for various AI models"
      ],
      "metadata": {
        "id": "0v9_tQcjvNSB"
      },
      "id": "0v9_tQcjvNSB"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "\n",
        "# Compute metrics for Decision Tree\n",
        "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
        "precision_dt = precision_score(y_test, y_pred_dt)\n",
        "recall_dt = recall_score(y_test, y_pred_dt)\n",
        "f1_dt = f1_score(y_test, y_pred_dt)\n",
        "\n",
        "# Compute metrics for LSTM\n",
        "accuracy_lstm = accuracy_score(y_test, y_pred_lstm)\n",
        "precision_lstm = precision_score(y_test, y_pred_lstm)\n",
        "recall_lstm = recall_score(y_test, y_pred_lstm)\n",
        "f1_lstm = f1_score(y_test, y_pred_lstm)\n",
        "\n",
        "# Prepare data for plotting\n",
        "models = ['Decision Tree', 'LSTM']\n",
        "metrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score']\n",
        "dt_scores = [accuracy_dt, precision_dt, recall_dt, f1_dt]\n",
        "lstm_scores = [accuracy_lstm, precision_lstm, recall_lstm, f1_lstm]\n",
        "\n",
        "# Create DataFrame\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Metric': metrics,\n",
        "    'Decision Tree': dt_scores,\n",
        "    'LSTM': lstm_scores\n",
        "})\n",
        "\n",
        "# Plotting\n",
        "metrics_df.set_index('Metric').plot(kind='bar', figsize=(8, 6), colormap='Set2')\n",
        "plt.title('Model Performance Comparison: Decision Tree vs LSTM')\n",
        "plt.ylabel('Score')\n",
        "plt.ylim(0, 1.1)\n",
        "plt.grid(axis='y')\n",
        "plt.legend(loc='lower right')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        },
        "id": "O6OQt9AsvNou",
        "outputId": "6ca0fd53-2d4d-4bae-8f7c-1fba62924600"
      },
      "id": "O6OQt9AsvNou",
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
