{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Lab Work: Developing and Comparing AI Models for Android Malware Detection\n",
        "\n",
        "## Objective:\n",
        "The goal of this lab is to develop and evaluate multiple AI models for detecting Android malware using the provided Android Malware Dataset. Students will choose at least three different machine learning or deep learning algorithms to compare their performance in classifying Android applications as benign or malicious.\n",
        "\n",
        "## Dataset Overview:\n",
        "The **Android Malware Dataset for Machine Learning** contains labeled Android APK samples, classified as benign (goodware) or malicious (e.g., adware, spyware, trojans). It includes various features extracted from the APKs, such as requested permissions, API calls, system behaviors, and more, which can be used to train machine learning models.\n",
        "\n",
        "## Tasks:\n",
        "\n",
        "1. **Data Preprocessing**:\n",
        "   - Load the dataset and clean it by handling missing values and converting categorical features into numerical ones if necessary.\n",
        "   - Split the data into training and testing sets.\n",
        "\n",
        "2. **Model Development**:\n",
        "   - Choose at least **three AI algorithms** of your choice (e.g., Logistic Regression, Random Forest, SVM, Neural Networks, XGBoost, etc.).\n",
        "   - Train each model on the dataset and evaluate their performance using accuracy, precision, recall, F1-score, and confusion matrix.\n",
        "\n",
        "3. **Model Comparison**:\n",
        "   - Compare the models based on their performance metrics.\n",
        "   - Analyze which model performs best and why.\n",
        "\n",
        "4. **Optional (Hyperparameter Tuning)**:\n",
        "   - Optionally, apply techniques like grid search to optimize the model’s hyperparameters.\n",
        "\n",
        "\n",
        "## Resources:\n",
        "- Kaggle Dataset: [Android Malware Dataset for Machine Learning](https://www.kaggle.com/datasets/shashwatwork/android-malware-dataset-for-machine-learning)\n",
        "\n",
        "You need to login in Kaggle to get access to the dataset.\n"
      ],
      "metadata": {
        "id": "pOcqXHG7w-Tk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#\n",
        "#\n",
        "#\n",
        "#\n",
        "# Your code to develop AI model for malware classification.\n",
        "# Hint: Use the example code provided in previous lab.\n",
        "#\n",
        "#\n",
        "#\n",
        "#"
      ],
      "metadata": {
        "id": "K48a8JcixVFT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, LSTM, Dropout\n",
        "from tensorflow.keras.optimizers import Adam"
      ],
      "metadata": {
        "id": "j7ZJI8S01N4F"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Define the column names based on your dataset's features\n",
        "column_names = [\"index\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\", \"urgent\", \"hot\",\n",
        "                \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\", \"num_root\", \"num_file_creations\",\n",
        "                \"num_shells\", \"num_access_files\", \"num_outbound_cmds\", \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\",\n",
        "                \"serror_rate\", \"srv_serror_rate\", \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\",\n",
        "                \"srv_diff_host_rate\", \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\",\n",
        "                \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\", \"dst_host_srv_serror_rate\",\n",
        "                \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"label\"]\n",
        "\n",
        "# Load dataset\n",
        "url = \"http://kdd.ics.uci.edu/databases/kddcup99/kddcup.data_10_percent.gz\"  # Replace with your actual dataset URL or path\n",
        "df = pd.read_csv(url, names=column_names)\n",
        "\n",
        "# Check the first few rows to ensure proper loading\n",
        "print(df.head())\n",
        "\n",
        "# Convert the label into binary values (benign = 0, malicious = 1)\n",
        "df['label'] = df['label'].apply(lambda x: 1 if x == 'malicious' else 0)\n",
        "\n",
        "# Check if the label column is processed correctly\n",
        "print(df['label'].value_counts())\n",
        "\n",
        "# Now proceed with data preprocessing, model development, etc.\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tG0Yuarb1SVs",
        "outputId": "0535070a-5ecc-4e85-ed30-225ffa385eec"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   index protocol_type service flag  src_bytes  dst_bytes  land  \\\n",
            "0      0           tcp    http   SF        181       5450     0   \n",
            "1      0           tcp    http   SF        239        486     0   \n",
            "2      0           tcp    http   SF        235       1337     0   \n",
            "3      0           tcp    http   SF        219       1337     0   \n",
            "4      0           tcp    http   SF        217       2032     0   \n",
            "\n",
            "   wrong_fragment  urgent  hot  ...  dst_host_srv_count  \\\n",
            "0               0       0    0  ...                   9   \n",
            "1               0       0    0  ...                  19   \n",
            "2               0       0    0  ...                  29   \n",
            "3               0       0    0  ...                  39   \n",
            "4               0       0    0  ...                  49   \n",
            "\n",
            "   dst_host_same_srv_rate  dst_host_diff_srv_rate  \\\n",
            "0                     1.0                     0.0   \n",
            "1                     1.0                     0.0   \n",
            "2                     1.0                     0.0   \n",
            "3                     1.0                     0.0   \n",
            "4                     1.0                     0.0   \n",
            "\n",
            "   dst_host_same_src_port_rate  dst_host_srv_diff_host_rate  \\\n",
            "0                         0.11                          0.0   \n",
            "1                         0.05                          0.0   \n",
            "2                         0.03                          0.0   \n",
            "3                         0.03                          0.0   \n",
            "4                         0.02                          0.0   \n",
            "\n",
            "   dst_host_serror_rate  dst_host_srv_serror_rate  dst_host_rerror_rate  \\\n",
            "0                   0.0                       0.0                   0.0   \n",
            "1                   0.0                       0.0                   0.0   \n",
            "2                   0.0                       0.0                   0.0   \n",
            "3                   0.0                       0.0                   0.0   \n",
            "4                   0.0                       0.0                   0.0   \n",
            "\n",
            "   dst_host_srv_rerror_rate    label  \n",
            "0                       0.0  normal.  \n",
            "1                       0.0  normal.  \n",
            "2                       0.0  normal.  \n",
            "3                       0.0  normal.  \n",
            "4                       0.0  normal.  \n",
            "\n",
            "[5 rows x 42 columns]\n",
            "label\n",
            "0    494021\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Preprocess the dataset\n",
        "df = df.dropna()  # Handle missing values\n",
        "encoder = LabelEncoder()\n",
        "df['label'] = encoder.fit_transform(df['label'])  # Encode labels (benign or malicious)\n",
        "\n",
        "# Assuming 'features' and 'label' are the columns in the dataset\n",
        "X = df.drop('label', axis=1)\n",
        "y = df['label']"
      ],
      "metadata": {
        "id": "Zic8zoFi1hRs"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the data into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "3n60TxDQ2cjX"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Assuming the columns that are categorical\n",
        "categorical_columns = ['protocol_type', 'service', 'flag']\n",
        "\n",
        "# Encoding categorical columns using LabelEncoder\n",
        "encoder = LabelEncoder()\n",
        "for col in categorical_columns:\n",
        "    df[col] = encoder.fit_transform(df[col])\n",
        "\n",
        "# Define X and y\n",
        "X = df.drop('label', axis=1)\n",
        "y = df['label']\n",
        "\n",
        "# Split the dataset into training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Feature Scaling\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n"
      ],
      "metadata": {
        "id": "wty6I0RP2eH6"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Decision Tree Classifier (ML)\n",
        "dt = DecisionTreeClassifier(random_state=42)\n",
        "dt.fit(X_train, y_train)\n",
        "y_pred_dt = dt.predict(X_test)\n",
        "accuracy_dt = accuracy_score(y_test, y_pred_dt)\n",
        "precision_dt = classification_report(y_test, y_pred_dt, output_dict=True)['accuracy']\n",
        "recall_dt = classification_report(y_test, y_pred_dt, output_dict=True)['macro avg']['recall']\n",
        "f1_dt = classification_report(y_test, y_pred_dt, output_dict=True)['macro avg']['f1-score']\n"
      ],
      "metadata": {
        "id": "AQDzOh7V3FSZ"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check the distribution of labels in y_train\n",
        "print(y_train.value_counts())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q1Zns5wR3qVn",
        "outputId": "e912c9b1-b3bb-47a3-fc60-afff80aba2ec"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "label\n",
            "0    395216\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the dataset while ensuring both classes are included in both training and testing sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n"
      ],
      "metadata": {
        "id": "MWFKIEvv362l"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# 3. LSTM Neural Network (DL)\n",
        "# Convert DataFrames to numpy arrays and reshape for LSTM input\n",
        "X_train_lstm = X_train.to_numpy().reshape((X_train.shape[0], 1, X_train.shape[1]))  # Reshape for LSTM input\n",
        "X_test_lstm = X_test.to_numpy().reshape((X_test.shape[0], 1, X_test.shape[1]))\n",
        "\n",
        "lstm_model = Sequential([\n",
        "    LSTM(64, return_sequences=False, input_shape=(X_train_lstm.shape[1], X_train_lstm.shape[2])),\n",
        "    Dropout(0.5),\n",
        "    Dense(32, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(1, activation='sigmoid')\n",
        "])\n",
        "\n",
        "lstm_model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])\n",
        "lstm_model.fit(X_train_lstm, y_train, epochs=10, batch_size=32, validation_data=(X_test_lstm, y_test))\n",
        "\n",
        "y_pred_lstm = (lstm_model.predict(X_test_lstm) > 0.5).astype(\"int32\")\n",
        "accuracy_lstm = accuracy_score(y_test, y_pred_lstm)\n",
        "precision_lstm = classification_report(y_test, y_pred_lstm, output_dict=True)['accuracy']\n",
        "recall_lstm = classification_report(y_test, y_pred_lstm, output_dict=True)['macro avg']['recall']\n",
        "f1_lstm = classification_report(y_test, y_pred_lstm, output_dict=True)['macro avg']['f1-score']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 609
        },
        "id": "GCNhzVKd2iFf",
        "outputId": "6a7c0ccb-7bf8-4cc1-f5d9-7f11d59b340b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m68s\u001b[0m 5ms/step - accuracy: 0.9965 - loss: 0.0133 - val_accuracy: 1.0000 - val_loss: 9.2644e-14\n",
            "Epoch 2/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m74s\u001b[0m 5ms/step - accuracy: 1.0000 - loss: 8.6685e-07 - val_accuracy: 1.0000 - val_loss: 2.2283e-21\n",
            "Epoch 3/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m46s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 2.8240e-08 - val_accuracy: 1.0000 - val_loss: 4.0966e-25\n",
            "Epoch 4/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m88s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 4.0321e-09 - val_accuracy: 1.0000 - val_loss: 8.7038e-27\n",
            "Epoch 5/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 3.8805e-10 - val_accuracy: 1.0000 - val_loss: 2.5052e-27\n",
            "Epoch 6/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 1.1958e-08 - val_accuracy: 1.0000 - val_loss: 4.5693e-28\n",
            "Epoch 7/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m47s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 8.0322e-10 - val_accuracy: 1.0000 - val_loss: 3.9316e-29\n",
            "Epoch 8/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 1.6424e-06 - val_accuracy: 1.0000 - val_loss: 1.1393e-29\n",
            "Epoch 9/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 4.0421e-09 - val_accuracy: 1.0000 - val_loss: 2.0950e-30\n",
            "Epoch 10/10\n",
            "\u001b[1m12351/12351\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m48s\u001b[0m 4ms/step - accuracy: 1.0000 - loss: 5.6488e-09 - val_accuracy: 1.0000 - val_loss: 6.1002e-31\n",
            "\u001b[1m3088/3088\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1ms/step\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'accuracy_svm' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-20-424d8924500a>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m metrics_df = pd.DataFrame({\n\u001b[1;32m     25\u001b[0m     \u001b[0;34m'Model'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'Decision Tree'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'SVM'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'LSTM'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m     \u001b[0;34m'Accuracy'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0maccuracy_dt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy_svm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy_lstm\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     27\u001b[0m     \u001b[0;34m'Precision'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mprecision_dt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprecision_svm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mprecision_lstm\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0;34m'Recall'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mrecall_dt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecall_svm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrecall_lstm\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'accuracy_svm' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create a DataFrame to store the metrics\n",
        "metrics_df = pd.DataFrame({\n",
        "    'Model': ['Decision Tree', 'LSTM'],\n",
        "    'Accuracy': [accuracy_dt, accuracy_lstm],\n",
        "    'Precision': [precision_dt, precision_lstm],\n",
        "    'Recall': [recall_dt, recall_lstm],\n",
        "    'F1-Score': [f1_dt, f1_lstm]\n",
        "})\n",
        "\n",
        "# Plot a bar graph comparing the models\n",
        "metrics_df.set_index('Model').plot(kind='bar', figsize=(10, 6))\n",
        "plt.title('Model Performance Comparison')\n",
        "plt.xlabel('Model')\n",
        "plt.ylabel('Score')\n",
        "plt.xticks(rotation=0)\n",
        "plt.legend(loc='lower right')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "4A3BBJWh5MF9",
        "outputId": "8f5f3a32-54db-4245-d21f-3341b1dcebdf"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Lab Logbook requirement**: Provide a graph comparing the performance of the AI model that you have developed."
      ],
      "metadata": {
        "id": "h6_8o5mcx2D3"
      }
    }
  ]
}
